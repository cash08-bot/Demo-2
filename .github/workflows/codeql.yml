name: CDK Deploy Pipeline

on:
  push:
    branches: [prod, dev, stg]
  pull_request:
    branches: [prod, dev, stg]

permissions:
  id-token: write
  contents: read
  actions: write
  pull-requests: write

jobs:
  synth-and-upload:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        include:
          - branch: dev
            env_name: dev
          - branch: stg
            env_name: stg
          - branch: prod
            env_name: prod

    environment: ${{ matrix.env_name }}

    env:
      ENV_ID: ${{ matrix.env_name }}
      AWS_REGION: us-east-1
      BUCKET_NAME: test-1-git

    steps:
      - name: Exit if branch does not match matrix branch
        if: ${{ github.ref != format('refs/heads/{0}', matrix.branch) }}
        run: echo "Skipping job as this branch doesn't match matrix.branch" && exit 0

      - name: Checkout code
        uses: actions/checkout@v3

      - name: Configure AWS credentials (OIDC)
        uses: aws-actions/configure-aws-credentials@v3
        with:
          role-to-assume: arn:aws:iam::381492133980:role/GitHubAction-AssumeRoleWithAction
          role-session-name: Github-Role
          aws-region: ${{ env.AWS_REGION }}

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 'lts/*'

      - name: Set up Maven
        uses: s4u/setup-maven-action@v1.11.0
        with:
          maven-version: '3.9.6'

      - name: Set up Java
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Set up AWS CDK
        run: npm install -g aws-cdk

      - name: Build Java CDK project
        run: mvn clean install

      - name: Run CDK synth
        run: cdk synth --context env=${{ env.ENV_ID }} --output cdk.out

      - name: Create CFN Guard rules
        run: |
          cat <<EOF > rules.guard
          rule s3_encryption {
            let buckets = Resources.*[ Type == "AWS::S3::Bucket" ]
            buckets.Properties.BucketEncryption.ServerSideEncryptionConfiguration[*].ServerSideEncryptionByDefault.SSEAlgorithm == "AES256"
          }

          rule no_iam_policy_wildcard {
            let policies = Resources.*[ Type == "AWS::IAM::Policy" ]
            not exists policies.Properties.PolicyDocument.Statement[*].Action where Action == "*"
          }

          rule ec2_no_public_ip {
            let instances = Resources.*[ Type == "AWS::EC2::Instance" ]
            instances.Properties.AssociatePublicIpAddress == false
          }

          rule sqs_timeout_check {
            let queues = Resources.*[ Type == "AWS::SQS::Queue" ]
            queues.Properties.VisibilityTimeout == 300
          }
EOF

      - name: Install CFN Guard
        run: |
          curl -Lo cfn-guard.zip https://github.com/aws-cloudformation/cloudformation-guard/releases/latest/download/cfn-guard-linux-x86_64.zip
          unzip cfn-guard.zip
          chmod +x cfn-guard
          sudo mv cfn-guard /usr/local/bin/
          cfn-guard --version

      - name: Validate with CFN Guard
        run: |
          for file in cdk.out/*.template.json; do
            echo "Validating $file"
            cfn-guard validate --rules rules.guard --data "$file" || exit 1
          done

      - name: Zip the CDK project
        run: |
          zip -r cdk-project.zip . -x ".git/*" ".github/*"
          ls -lh cdk-project.zip

      - name: Upload to S3 bucket with short commit SHA
        run: |
          SHORT_SHA=${GITHUB_SHA::7}
          aws s3 cp cdk-project.zip s3://${{ env.BUCKET_NAME }}/cdk-project-${{ env.ENV_ID }}-${SHORT_SHA}.zip --region ${{ env.AWS_REGION }}
