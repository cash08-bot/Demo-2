name: CDK Deploy Pipeline

on:
  push:
    branches: [prod, dev, stg]
  pull_request:
    branches: [prod, dev, stg]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: false

permissions:
  id-token: write
  contents: read
  actions: write
  pull-requests: write

jobs:
  synth-and-validate:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        include:
          - branch: dev
            env_name: dev
          - branch: stg
            env_name: stg
          - branch: prod
            env_name: prod

    environment: ${{ matrix.env_name }}

    env:
      ENV_ID: ${{ matrix.env_name }}
      AWS_REGION: us-east-1
      BUCKET_NAME: test-1-git

    steps:
      - name: Exit if branch does not match matrix.branch
        if: ${{ github.ref != format('refs/heads/{0}', matrix.branch) }}
        run: echo "Skipping job as this branch doesn't match matrix.branch" && exit 0

      - name: Checkout code
        uses: actions/checkout@v3

      - name: Configure AWS credentials (OIDC)
        uses: aws-actions/configure-aws-credentials@v3
        with:
          role-to-assume: arn:aws:iam::381492133980:role/GitHubAction-AssumeRoleWithAction.
          role-session-name: Github-Role
          aws-region: ${{ env.AWS_REGION }}

      - name: Set up Node.js (latest LTS)
        uses: actions/setup-node@v3
        with:
          node-version: 'lts/*'

      - name: Acknowledge Node.js notice
        run: npx cdk acknowledge 34635 || true

      - name: Set up Maven
        uses: s4u/setup-maven-action@v1.11.0
        with:
          maven-version: '3.9.6'

      - name: Set up Java
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Install AWS CDK
        run: npm install -g aws-cdk

      - name: Replace version tag in cdk.json and print
        run: |
          COMMIT_ID=$(git rev-parse --short HEAD)
          jq --arg cid "$COMMIT_ID" \
            '.context["'${ENV_ID}'"].tags |= map(
              if .key == "version" then .value = $cid else . end
            )' cdk.json > tmp.json && mv tmp.json cdk.json

          echo "Updated version tag for environment '$ENV_ID':"
          jq '.context["'${ENV_ID}'"].tags' cdk.json

      - name: Build Java CDK project
        run: mvn clean install

      - name: Run CDK synth
        run: cdk synth --context env=${{ env.ENV_ID }} --output cdk.out

      - name: Install CFN Guard CLI
        run: |
          curl -Lo cfn-guard.zip https://github.com/aws-cloudformation/cloudformation-guard/releases/latest/download/cfn-guard-linux.zip
          unzip cfn-guard.zip -d cfn-guard-bin
          sudo mv cfn-guard-bin/cfn-guard /usr/local/bin/
          cfn-guard --version

      - name: Download NIST 800-53 rules
        run: |
          mkdir -p guard-rules
          curl -sL https://raw.githubusercontent.com/aws-cloudformation/cloudformation-guard/main/examples/rules/nist-800-53/require-tags.guard -o guard-rules/nist.guard

      - name: Validate templates with CFN Guard
        run: |
          for f in cdk.out/*.template.json; do
            echo "Validating $f"
            cfn-guard validate -d "$f" -r guard-rules/nist.guard || exit 1
          done

      - name: Zip the CDK project
        run: |
          zip -r cdk-project.zip . -x ".git/*" ".github/*"
          ls -lh cdk-project.zip

      - name: Upload to S3 with short commit ID
        run: |
          SHORT_SHA=$(git rev-parse --short HEAD)
          aws s3 cp cdk-project.zip s3://${{ env.BUCKET_NAME }}/cdk-project-${{ env.ENV_ID }}-${SHORT_SHA}.zip --region ${{ env.AWS_REGION }}
